
Wordy | Date: 4/3/2018
I'm still considering whether I should rename this to R-Hex.
The reason I haven't yet is because R-Hex was meant to b statically typed

Wordy | Date: 4/3/2018
Wordy is pretty operational right now. Here's the features implemented so far:

*Functions - ability to call them, declare them.
*Classes - can declare classes and class instance variables, and functions
  *Can access instance members now
*Loops - Supports while and for loops 
*Conditionals - support if/else blocks, and finally adheres to block scopes
*Scopes! Finally got it adhere to block scopes in general
*Returns, breaks, cotinues are all supported
  *Functions will always return Void (a null valued object), unless otherwise declared in the function body.
*Comments - line and block statements are supported

What I need to do so far:
*More testing for the list above.
*Direct interaction with Java Class - any Java class
  -Notably, direct use of the Java Standard Library
  
*Multi-file support - So far, I've just been interpreting one file. Need support for many files
  - And with this, how to handle naming
  
*Harsher syntax checking - I'm seeing a significant amount of edge cases pass through the parser
*Further document and comment the source files



Wordy | Date: 4/3/2018
Import statements should be like this:
"import "/*FILENAME*/" <-- for non Java classes

For importing Java classes, the syntax for it is:
"import java:\*Java class name (full, binary name if needed)*\"
  -Wildcard imports will not be supported
 
Wordy | Date: 4/6/2018
* try/catch syntax:  try{ /*code*/ }catch(Exception1, Exception2 , ... ExceptionN var){}

Wordy | Date: 4/30/2018
*Added string concatenation. You can concat strings to strings and numbers.

*TODO: try/catch structure verification
       import statements
       *More testing for the list above.
	   *Direct interaction with Java Class - any Java class
  		-Notably, direct use of the Java Standard Library
	   *Multi-file support - So far, I've just been interpreting one file. Need support for many files
  		- And with this, how to handle naming
	   *Harsher syntax checking - I'm seeing a significant amount of edge cases pass through the parser
	   *Further document and comment the source files
      
Wordy | Date: 5/1/2018
*Potential class extension syntax:

class Car : Vehicle{}

*I was thinking of using Python's syntax, which would be like:

class Car(Vehicle){}

*Note: this syntax has yet to be implemented


Wordy | Date: 5/4/2018
*Implemented syntax for class extension and imports. 
 -For imports, I'm allowing aliases so two classes that have the same simple name
  can be implemented.
 -Example use:
 	"import hello.world.Class"
 	"import hello.terra.Class"  <---type conflict
 	
 	with aliases:
 	
 	"import hello.world.Class as Point1"
 	"import hello.terra.Class"   <--no type conflict


Wordy | Date: 5/8/2018
*Changed imports to only importing java classes.
 - If you want to access a member in another Wordy file, just do:
      "OtherFile.function() or OtherFile.variable" and etc.
*Currently working on finding a way to load all classes from the "java.lang" package
*Created the WordyCompiler class as a front-end for the compilation part of Wordy.
*Added maps for imported classes and Wordy source files in SymbolTable.
 -Most of the import/java-interaction features are first being implemented in the compile-side
  before the runtime-side. It'll make things easier.
*Will be using Google Guava for reflection related classes


Wordy | Date: 5/10/2018
*Found a way to find all classes in the java.lang package which should make up all of the java standard library classes
 - Have tied this in structure verifying and referred system classes are correctly checked.
 - import aliases are also correctly checked

*GOAL: Runtime interaction with java classes
 -So far: have created the WordyRuntime class as a front end for the runtime aspect.
 -Need to find a way to revamp identifier lookup to accomadate this new feature


Wordy | Date: 5/13/2018 - 5/14/2018
*Implemented one way Java interaction. (Meaning Wordy code can call Java methods, and retrieve
 Java variables. Java code cannot yet interact with Wordy code in a beautiful manner)
  -Can call Java constructors and methods
*Smoother multi-file reference support
*The package "wordy.standard" will be for standard library classes and functionalities
  -Added array functionality using the Array class
*Added long support
*Played around with reflection within Wordy runtime. Changing variable
 values are a bit tricky as 
*Further enforcement of Import aliases on constructors
 Example: 
   import java.net.Socket as Socky;
   
   let b = Socky(); //you can call Socket's constructor as Socky()
*Runtime has been majorly changed. The type tree is as is:

Component -> StackComponent -> VariableMember
          -> Instance  -> FileInstance
                       -> Instance
                       -> JavaInstance
                       
*All constants and literals are now JavaInstances (using the wrapper classes for primitives)

*TODO: 
 -TEST CASES: external file references, Java interaction, loops, conditions and other constructs.
 -Type check for inheritance and better enforcement of type behavior.
   *example: if Class A's parent is an abstract class, make sure A implements all abstract methods
   -Also, methods on objects should first call methods on base class. If not present, then call
    parent implementation. (this may mean calling super class' constructors and getting the 
    intersection of methods)
 -Implement error handling (try/catch) in runtime
 -Work on bidirectional interaction between Wordy and Java code
 -Smoother type comparison between primitives (longs, ints, and doubles), along with computations
   *Right now, I'm converting ints to longs, and using doubles for comparisons
 -Need stronger function search for Java methods. Right now, searches for java methods
  just match the argument amount and name. There is not check for argument types and 
  parameter type expectation. Also, if the arguments are subtypes of parameters.
   *This can be challenging.

*Clarifications:
 -Wordy types (types declared in Wordy code) shouldn't be directly referenced to 
  in Java code. Let's say you've made a class in Java that does something with a 
  Wordy object - say the type "Ice", as in:
     
     public void some(Ice ice) {  <--That's not correct. Ice isn't an actual
                                     class in Java space.
     }
     
     public void some(Instance ice){               <--This is the correct way.
        //check if ice is an Ice instance:           
        if(ice.getDefinition().childof("Ice")){
        
        }     
     }

	When Wordy code interacts with Java code, the Wordy runtime sends
	Instance objects rather than actual instances of the objects their representing.

   WORDY  ---> (Instances)  JAVA
   WORDY  <--- (Objects / JavaInstances (wrappers for Objects)) JAVA


Wordy | Date: 5/18/2018 - 5/20/2018
* All TODOs of the previous entries are still active
* About Wordy functions and lookup:
  - Two Wordy functions are considered the same when they're in the same file - or class - , same name and same
    amount of arguments

* Reflection seems to be alrigth now. 

*TODOS (In addition)
-Enforce type enforcement for inheritance
 *That means calling super constructors in child's constructors
  -First statement in child's constructors must be a function call: (like: super())
-Implement exceptions


Wordy | Date: 5/21/2018
* Improved Array class for better functionality - such as shallow cloning
* Added ArrayList class

Wordy | Date: 5/24/2018
* Adding enforcement of inheritance
 -Added grammar to allow for interface implementation:
    class Hello : Object implements Inteface1, Interface2, ... , InterfaceN {
                    ^- parent                       ^-interfaces
 -Actual enforcement occurs during runtime initialization









 